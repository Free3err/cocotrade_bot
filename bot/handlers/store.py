from aiogram import Dispatcher, types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot.services import CoconutRequests, UserRequests, PaymentRequests, DonationRequests

store_router = Router()


class StoreStates(StatesGroup):
    selecting_item = State()
    input_quantity = State()


class Store:
    @staticmethod
    def register_all(dispatcher: Dispatcher):
        dispatcher.include_router(store_router)

        dispatcher.callback_query.register(CommonStore.common_store, F.data == "common_store")
        dispatcher.callback_query.register(DonateStore.donate_store, F.data == "donate_store")

        dispatcher.callback_query.register(CommonStore.coconuts_seems, F.data == "coconuts_seems")
        dispatcher.callback_query.register(CommonStore.chosen_coco_view, F.data.contains("chosen_coco_view"))

        dispatcher.callback_query.register(DonateStore.donate_sum_input_handler, F.data == "donate_sum_input_handler")
        dispatcher.callback_query.register(DonateStore.check_payment_status, F.data.contains("check_payment"))

        dispatcher.callback_query.register(CommonStore.input_quantity_handler, F.data == "input_quantity_handler")


class CommonStore:
    @staticmethod
    async def common_store(callback_query: types.CallbackQuery):
        buttons = [[InlineKeyboardButton(text="ü•• –°–µ–º–µ–Ω–∞ –∫–æ–∫–æ—Å–æ–≤", callback_data="coconuts_seems")],
                   [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_stores_menu")]]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback_query.message.edit_text("üè™ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—ã—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω!</b>\n"
                                               "\n"
                                               "<b>–ù–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∏–∂–µ:</b>", parse_mode="HTML",
                                               reply_markup=markup)

    @staticmethod
    async def coconuts_seems(callback_query: types.CallbackQuery, state: FSMContext):
        await state.set_state(StoreStates.selecting_item)
        coconuts = CoconutRequests.get_all()
        await state.update_data(coconuts_data=coconuts, callback_data="coconuts_seems")

        buttons = [[InlineKeyboardButton(text=coco['name'], callback_data=f"chosen_coco_view.{coco['id']}")] for coco in
                   coconuts]
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="common_store")])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback_query.message.edit_text("ü•• <b>–ù–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Å–æ—Ä—Ç–æ–≤ –∫–æ–∫–æ—Å–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∏–∂–µ:</b>\n"
                                               "\n"
                                               "‚ùó <b>–£—á—Ç–∏—Ç–µ, —á—Ç–æ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ –∫–æ–∫–æ—Å–∞, "
                                               "–æ—Ç–ª–∏—á–∞—é—â–µ–≥–æ—Å—è –æ—Ç –í–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ, –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ—Å–µ–≤—ã \"—Å–≥–æ—Ä–∞—é—Ç\"!</b>",
                                               parse_mode="HTML", reply_markup=markup)

    @staticmethod
    async def chosen_coco_view(callback_query: types.CallbackQuery, state: FSMContext):
        chosen_coco = await get_chosen_item(callback_query, state)
        await state.update_data(chosen_coco=chosen_coco)

        buttons = [[InlineKeyboardButton(text="üí∞ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏", callback_data="input_quantity_handler")],
                   [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="coconuts_seems")]]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback_query.message.edit_text(f"ü•• <b>{chosen_coco['name']}</b>\n"
                                               f"üïê <b>–ü–ª–æ–¥–æ–Ω–æ—Å–∏–º–æ—Å—Ç—å:</b> {chosen_coco['amount_per_hour']} –∫–æ–∫–æ—Å–æ–≤/—á–∞—Å\n"
                                               f"üß™ <b>–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π:</b> {'–î–∞' if chosen_coco['is_experimental'] else '–ù–µ—Ç'}\n"
                                               f"üìÉ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {chosen_coco['description']}\n"
                                               "\n"
                                               f"üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {chosen_coco['price']} –∫–æ–∫–æ—Å–æ–≤", parse_mode="HTML",
                                               reply_markup=markup)

    @staticmethod
    async def input_quantity_handler(callback_query: types.CallbackQuery, state: FSMContext):
        await state.set_state(StoreStates.input_quantity)
        state_data = await state.get_data()

        markup = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                                   callback_data=f"chosen_coco_view.{state_data['chosen_coco']['id']}")]])
        await callback_query.message.edit_text("‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ø–æ–∫—É–ø–∞–µ–º–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:</b>", parse_mode="HTML",
                                               reply_markup=markup)

    @staticmethod
    async def buy_chosen_coconut(message: types.Message, state: FSMContext):
        state_data = await state.get_data()
        user = UserRequests.get(message.from_user.id)
        coco_data = state_data['chosen_coco']
        quantity = state_data['quantity']
        total_price = coco_data['price'] * quantity

        back_button = InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="coconuts_seems")
        markup = InlineKeyboardMarkup(inline_keyboard=[[back_button]])

        if user['coconut_balance'] < total_price:
            await message.answer(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–∫–æ—Å–æ–≤!</b>",
                parse_mode="HTML",
                reply_markup=markup
            )
            await state.clear()
            return

        if user["farm"]["coconut"]["id"] != coco_data["id"]:
            update_data = {
                "coconut_balance": user["coconut_balance"] - total_price,
                "farm": {
                    "coconut": {"id": coco_data["id"]},
                    "coconuts_count": quantity
                }
            }
            if UserRequests.patch(message.from_user.id, update_data):
                await message.answer(
                    "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∫–æ–∫–æ—Å—ã!</b>\n\n"
                    "<b>–í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ–∫–æ—Å—ã –±—ã–ª–∏ —Å–æ–∂–∂–µ–Ω—ã!</b>",
                    parse_mode="HTML",
                    reply_markup=markup
                )
        else:
            update_data = {
                "coconut_balance": user["coconut_balance"] - total_price,
                "farm": {
                    "coconuts_count": quantity + user["farm"]["coconuts_count"]
                }
            }
            if UserRequests.patch(message.from_user.id, update_data):
                await message.answer(
                    "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∫–æ–∫–æ—Å—ã!</b>",
                    parse_mode="HTML",
                    reply_markup=markup
                )

        await state.clear()


class DonateStore:
    @staticmethod
    async def donate_store(callback_query: types.CallbackQuery, state: FSMContext | None = None):
        if state:
            await state.clear()

        buttons = [[InlineKeyboardButton(text="üïäÔ∏è –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ", callback_data="donate_sum_input_handler")],
                   [InlineKeyboardButton(text="ü•• –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∫–æ–∫–æ—Å—ã",
                                         callback_data="experimental_coconuts_seems")],
                   [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_stores_menu")]]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback_query.message.edit_text(f"üè¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ donate –º–∞–≥–∞–∑–∏–Ω!</b>\n"
                                               f"\n"
                                               f"–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å —Å–µ–±—è –≤ —É–¥–∞—á–µ –∏–ª–∏ –ø–æ–∂–µ—Ä—Ç–æ–≤–æ–≤–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É "
                                               f"–Ω–∞ –ø—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ!", parse_mode="HTML", reply_markup=markup
                                               )

    @staticmethod
    async def donate_sum_input_handler(callback_query: types.CallbackQuery, state: FSMContext):
        await state.set_state(StoreStates.input_quantity)
        await state.update_data(callback_data=callback_query.data)
        markup = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="donate_store")]])
        await callback_query.message.edit_text("‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –í–∞—à–µ–≥–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:</b>", parse_mode="HTML",
                                               reply_markup=markup)

    @staticmethod
    async def donate(message: types.Message, state: FSMContext):
        state_data = await state.get_data()
        amount = state_data['quantity']
        payment_data = PaymentRequests.create({
            "amount": amount,
            "telegram_id": message.from_user.id,
            "description": "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—É CocoTrade Project",
            "is_donate": True,
        })

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_payment.{payment_data['id']}")]])

        await message.answer("ü´Ç <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—É –∫–æ–ø–µ–π–∫—É!</b>\n"
                             "\n"
                             f"<b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã - {payment_data['confirmation']['confirmation_url']}</b>",
                             parse_mode="HTML", reply_markup=markup)
        await state.clear()

    @staticmethod
    async def check_payment_status(callback_query: types.CallbackQuery):
        payment_id = callback_query.data.split(".")[1]
        payment = PaymentRequests.get(payment_id)
        payment_status = payment['status']

        if not payment_status:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return

        if payment_status == "succeeded":
            UserRequests.patch(callback_query.from_user.id, {"rub_balance": payment['amount']['value']})
            DonationRequests.create({"donator_id": callback_query.from_user.id, "amount": payment['amount']['value']})
            await callback_query.message.edit_text(
                "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ!</b>\n\n"
                "–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç!",
                parse_mode="HTML"
            )
        elif payment_status == "pending":
            await callback_query.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è", show_alert=True)
        else:
            await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω", show_alert=True)


@store_router.message(StoreStates.input_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError

        await state.update_data(quantity=quantity)
        match state_data['callback_data']:
            case "coconuts_seems":
                await CommonStore.buy_chosen_coconut(message, state)
            case "donate_sum_input_handler":
                await DonateStore.donate(message, state)
    except ValueError:
        markup = None
        match state_data['callback_data']:
            case "coconut_seems":
                coco = state_data['chosen_coco']
                markup = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"chosen_coco_view.{coco['id']}")]])
            case "donate_sum_input_handler":
                markup = InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="donate_store")]])
        await message.answer("‚ùó <b>–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!</b>", parse_mode="HTML", reply_markup=markup)
        await state.set_state(StoreStates.selecting_item)


async def get_chosen_item(callback_query: types.CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    item_id = int(callback_query.data.split(".")[1])
    return [coco for coco in state_data["coconuts_data"] if coco["id"] == item_id][0]
