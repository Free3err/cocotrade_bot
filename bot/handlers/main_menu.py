from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, CallbackQuery
from aiogram.filters import Command

from bot.services import UserRequests


class MainMenu:
    @staticmethod
    def register_all(dispatcher: Dispatcher):
        dispatcher.message.register(MainMenu.start, Command("start"))
        dispatcher.message.register(MainMenu.farm, F.text.contains("ü•• –§–µ—Ä–º–∞"))
        dispatcher.message.register(MainMenu.store, F.text.contains("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω"))
        dispatcher.message.register(MainMenu.travels, F.text.contains("‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"))
        dispatcher.message.register(MainMenu.statistic, F.text.contains("üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        dispatcher.message.register(MainMenu.settings, F.text.contains("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
        dispatcher.message.register(MainMenu.about, F.text.contains("üèùÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"))

        dispatcher.callback_query.register(MainMenu.store, F.data == "back_to_stores_menu")
        dispatcher.callback_query.register(MainMenu.farm, F.data == "farm")

    @staticmethod
    async def start(message: types.Message) -> None:
        user = UserRequests.get(message.from_user.id)
        if not user:
            UserRequests.register(message.from_user.id)

        buttons = [[KeyboardButton(text="ü•• –§–µ—Ä–º–∞")],
                   [KeyboardButton(text="üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton(text="‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è")],
                   [KeyboardButton(text="üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                   [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="üèùÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")]]
        markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

        await message.answer(f"üå¥ <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n"
                             f"\n"
                             f"ü•• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>CocoTrade</b> - —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –Ω–∞ –∫–æ–∫–æ—Å–∞—Ö!\n"
                             f"üöÄ –ù–∞—á–∏–Ω–∞–π —Å –º–∞–ª–µ–Ω—å–∫–æ–π —Ñ–µ—Ä–º—ã –∏ —Å—Ç–∞–Ω—å –º–æ–Ω–æ–ø–æ–ª–∏—Å—Ç–æ–º –≤ —Å—Ñ–µ—Ä–µ –∫–æ–∫–æ—Å–æ–≤!\n"
                             f"\n"
                             f"üßë‚Äçüíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - @free3err</b>", parse_mode="HTML", reply_markup=markup)

    @staticmethod
    async def farm(query: types.Message | types.CallbackQuery, state: FSMContext | None = None) -> None:
        if state:
            await state.clear()

        buttons = [[InlineKeyboardButton(text="ü•• –°–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π", callback_data='collect')],
                   [InlineKeyboardButton(text="üèùÔ∏è –ú–æ–∏ –ø–æ—Å–µ–≤—ã", callback_data='my_crops'),
                    InlineKeyboardButton(text="üöÄ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", callback_data='technologies_store')]]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        match type(query):
            case types.Message:
                user_data = UserRequests.get(query.from_user.id)
                growing_speed = round(
                    user_data['farm']['coconuts_count'] * user_data['farm']['coconut']['amount_per_hour'] * \
                    user_data['farm']['technology']['multiplier'])

                await query.answer("ü•• <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–µ—Ä–º—É!</b>\n"
                                   f"\n"
                                   f"üå± –í—ã—Ä–æ—Å–ª–æ –Ω–∞ —Ñ–µ—Ä–º–µ: <b> {user_data['farm']['uncollected']} –∫–æ–∫–æ—Å–æ–≤</b>\n"
                                   f"üïë –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è: <b>{growing_speed} –∫–æ–∫–æ—Å–æ–≤/—á–∞—Å</b>\n"
                                   f"\n"
                                   f"üè¶ –ö–æ–∫–æ—Å–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{user_data['coconut_balance']} –∫–æ–∫–æ—Å–æ–≤</b>\n"
                                   f"üíµ –†—É–±–ª–µ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{user_data['rub_balance']} —Ä—É–±–ª–µ–π</b>",
                                   parse_mode="HTML",
                                   reply_markup=markup)
            case types.CallbackQuery:
                user_data = UserRequests.get(query.from_user.id)
                growing_speed = round(
                    user_data['farm']['coconuts_count'] * user_data['farm']['coconut']['amount_per_hour'] * \
                    user_data['farm']['technology']['multiplier'])

                await query.message.edit_text("ü•• <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–µ—Ä–º—É!</b>\n"
                                              f"\n"
                                              f"üå± –í—ã—Ä–æ—Å–ª–æ –Ω–∞ —Ñ–µ—Ä–º–µ: <b> {user_data['farm']['uncollected']} –∫–æ–∫–æ—Å–æ–≤</b>\n"
                                              f"üïë –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è: <b>{growing_speed} –∫–æ–∫–æ—Å–æ–≤/—á–∞—Å</b>\n"
                                              f"\n"
                                              f"üè¶ –ö–æ–∫–æ—Å–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{user_data['coconut_balance']} –∫–æ–∫–æ—Å–æ–≤</b>\n"
                                              f"üíµ –†—É–±–ª–µ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{user_data['rub_balance']} —Ä—É–±–ª–µ–π</b>",
                                              parse_mode="HTML",
                                              reply_markup=markup)

    @staticmethod
    async def store(query: types.Message | types.CallbackQuery) -> None:
        buttons = [[InlineKeyboardButton(text="üè™ –û–±—ã—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω", callback_data='store')],
                   [InlineKeyboardButton(text="üè¨ VIP –º–∞–≥–∞–∑–∏–Ω", callback_data='donut_store')]]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        match type(query):
            case types.Message:
                await query.answer("üõçÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç—Ä–µ–±—É–µ–º—ã–π –º–∞–≥–∞–∑–∏–Ω:</b>", parse_mode="HTML",
                                   reply_markup=markup)
            case types.CallbackQuery:
                await query.message.edit_text("üõçÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç—Ä–µ–±—É–µ–º—ã–π –º–∞–≥–∞–∑–∏–Ω:</b>", parse_mode="HTML",
                                              reply_markup=markup)

    @staticmethod
    async def travels(query: types.Message | types.CallbackQuery) -> None:

        buttons = [[InlineKeyboardButton(text="üß≠ –õ–æ–∫–∞—Ü–∏–∏", callback_data='locations')]]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        match type(query):
            case types.Message:
                user_data = UserRequests.get(query.from_user.id)
                await query.answer(f"üß≥ <b>–°–µ–π—á–∞—Å –í—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –≤ {user_data['location']['name']}!</b>", parse_mode="HTML",
                                   reply_markup=markup)
            case types.CallbackQuery:
                user_data = UserRequests.get(query.message.from_user.id)
                await query.message.edit_text(f"üß≥ <b>–°–µ–π—á–∞—Å –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ {user_data['location']['name']}!</b>",
                                              parse_mode="HTML",
                                              reply_markup=markup)

    @staticmethod
    async def statistic(message: types.Message) -> None:
        statistics = {}
        await message.answer(f"üìâ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ CocoTrade</b>\n"
                             f"\n"
                             f"üë• –ö–æ–ª-–≤–æ —Ñ–µ—Ä–º: <b>{statistics['count_farms']}</b>\n"
                             f"ü•• –í—Å–µ–≥–æ –∫–æ–∫–æ—Å–æ–≤: <b>{statistics['count_coconut']}</b>\n"
                             f"üí∏ –î–æ–Ω–∞—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É: <b>{statistics['count_donuts']} —Ä—É–±–ª–µ–π</b>",
                             parse_mode="HTML")

    @staticmethod
    async def settings(query: types.Message | CallbackQuery) -> None:
        user_data = UserRequests.get(query.from_user.id)

        buttons = [[InlineKeyboardButton(text="üîá –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫",
                                         callback_data='unsubscribe_on_spam') if user_data[
            'is_subscribed_on_spam'] else InlineKeyboardButton(
            text="üîä –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data='subscribe_on_spam')],
                   [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data='delete_account')]]
        if user_data['role']['id'] == 0:
            buttons.append([InlineKeyboardButton(text="üßë‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        match type(query):
            case types.Message:
                await query.answer("‚öôÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫!</b>", parse_mode="HTML",
                                   reply_markup=markup)
            case types.CallbackQuery:
                await query.message.edit_text("‚öôÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫!</b>", parse_mode="HTML",
                                              reply_markup=markup)

    @staticmethod
    async def about(message: types.Message) -> None:
        buttons = [[InlineKeyboardButton(text="üë®‚Äç‚öñÔ∏è –ü—Ä–∞–≤–∏–ª–∞", url="https://telegra.ph/Pravila-CocoTrade-04-25")],
                   [InlineKeyboardButton(text="üìú –£—Å–ª–æ–≤–∏—è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                                         url="https://telegra.ph/Usloviya-ispolzovaniya-CocoTrade-04-25"),
                    InlineKeyboardButton(text="ü™™ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                                         url="https://telegra.ph/Politika-Konfidencialnosti-CocoTrade-04-25")]]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(f"ü•• <b>CocoTrade: —ç–∫–æ–Ω–æ–º–∏–∫–∞ –Ω–∞ –∫–æ–∫–æ—Å–∞—Ö</b>\n"
                             f"\n"
                             f"–≠—Ç–æ –∏–≥—Ä–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç, "
                             f"–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø–æ–Ω—è—Ç–∏—è —Ä–∞–±–æ—Ç—ã —Ä—ã–Ω–∫–∞ –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ö–∞–Ω–∏–∫ "
                             f"—ç–∫–æ–Ω–æ–º–∏–∫–∏ –æ–±—ã—á–Ω–æ–º –ª—é–¥—è–º.\n"
                             f"\n"
                             f"‚ùì <b>–ò–¥–µ—è –∏–≥—Ä—ã –ø—Ä–æ—Å—Ç–∞ - –í—ã –Ω–∞—á–∏–Ω–∞—é—â–∏–π –º–∞–≥–Ω–∞—Ç, –≤–ª–∞–¥–µ—é—â–∏–π –Ω–µ–±–æ–ª—å—à–æ–π —Ñ–µ—Ä–º–æ–π –∫–æ–∫–æ—Å–æ–≤.</b>\n"
                             f"üöÄ –†–∞–∑–≤–∞–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å, –ø–æ–∫—É–ø–∞—è –Ω–æ–≤—ã–µ —Å–æ—Ä—Ç–∞ –º–æ—Ö–Ω–∞—Ç—ã—Ö –æ—Ä–µ—Ö–æ–≤ "
                             f"–∏–ª–∏ –º–µ–Ω—è—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –∏—Ö –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è, –∞ –ø–æ—Å–ª–µ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ —Å–µ–º–µ–Ω–∞ –∏–ª–∏ –∫—É–ø–∏—Ç–µ "
                             f"–∏—Ö –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –±–∏—Ä–∂–µ —É –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.\n"
                             f"\n"
                             f"üßë‚Äçüíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - @free3err, –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–õ–∏—Ü–µ—è</b>",
                             parse_mode="HTML", reply_markup=markup)
